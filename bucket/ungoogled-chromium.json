{
  "version": "141.0.7390.122-1.1",
  "description": "Ungoogled Chromium - Google Chromium without Google's integration",
  "homepage": "https://api.github.com/repos/ungoogled-software/ungoogled-chromium-windows/releases/latest",
  "license": "BSD-3-Clause",
  "url": "https://github.com/ungoogled-software/ungoogled-chromium-windows/releases/download/141.0.7390.122-1.1/ungoogled-chromium_141.0.7390.122-1.1_windows_x64.zip",
  "hash": "sha256:5588f83f5b45064042b9b03928e2bdddff7d947f6a957b6185e3681331595c5b",
  "depends": [
    "widevinecdm",
    "chromium-crlset"
  ],
  "bin": [
    [
      "chrome.exe",
      "chrome",
      "--user-data-dir=\"$dir\\User Data\" --disable-machine-id --disable-encryption --no-default-browser-check --profile-directory=\"Default\""
    ]
  ],
  "shortcuts": [
    [
      "chrome.exe",
      "Chromium",
      "--user-data-dir=\"$dir\\User Data\" --disable-machine-id --disable-encryption --no-default-browser-check --profile-directory=\"Default\""
    ]
  ],
  "extract_dir": "ungoogled-chromium_141.0.7390.122-1.1_windows_x64",
  "post_install": [
    "$componentPackage = @{",
    "  'WidevineCdm' = 'widevinecdm'",
    "  'CertificateRevocation' = 'chromium-crlset'",
    "}",
    "Write-Host 'Linking DRM and security components (WidevineCdm, CRLSet)...'",
    "$componentPackage.GetEnumerator() | ForEach-Object {",
    "  $pkgName = $_.Value",
    "  $componentDir = $_.Key",
    "  $pkgCurrentDir = $(versiondir $pkgName 'current' $global)",
    "  if ($pkgCurrentDir) {",
    "    $sourceComponentPath = Join-Path $pkgCurrentDir $componentDir",
    "    if (Test-Path $sourceComponentPath) {",
    "      New-Item -Path (Join-Path $dir $componentDir) -Target $sourceComponentPath -ItemType Junction -Force | Out-Null",
    "      Write-Host (\"Linked {0} from package '{1}'.\" -f $componentDir, $pkgName)",
    "      # Try to detect installing bucket (best effort)",
    "      $bucketDetected = $null",
    "      $installJsonPath = Join-Path $pkgCurrentDir 'install.json'",
    "      $manifestJsonPath = Join-Path $pkgCurrentDir 'manifest.json'",
    "      foreach ($infoPath in @($installJsonPath, $manifestJsonPath)) {",
    "        if (-not $bucketDetected -and (Test-Path $infoPath)) {",
    "          try {",
    "            $info = Get-Content $infoPath -Raw | ConvertFrom-Json",
    "            if ($info.bucket) { $bucketDetected = $info.bucket }",
    "            elseif ($info.SourceBucket) { $bucketDetected = $info.SourceBucket }",
    "          } catch {}",
    "        }",
    "      }",
    "      if ($bucketDetected -and $bucketDetected -ne 'scoop-alts') {",
    "        Write-Host (\"Note: dependency '{0}' appears to be installed from bucket '{1}'. Components from other buckets may differ.\" -f $pkgName, $bucketDetected) -ForegroundColor Yellow",
    "        Write-Host \"Tip: To use scoop-alts components, run: scoop bucket add scoop-alts https://github.com/danalec/scoop-alts\" -ForegroundColor Yellow",
    "      }",
    "    } else {",
    "      Write-Host (\"Warning: component directory '{0}' was not found under '{1}'. Ensure the dependency is up to date.\" -f $componentDir, $pkgName) -ForegroundColor Yellow",
    "    }",
    "  } else {",
    "    Write-Host (\"Warning: dependency '{0}' is not installed. Install it with 'scoop install {0}' before using DRM/revocation features.\" -f $pkgName) -ForegroundColor Yellow",
    "  }",
    "}",
    "Write-Host 'Component linking complete. Restart Chromium to apply changes.' -ForegroundColor Green",
    "$shouldRun = $false",
    "if ($env:SCOOP_SET_DEFAULT_BROWSER -eq '1') { $shouldRun = $true }",
    "elseif ($env:SCOOP_INTERACTIVE -eq '1') {",
    "  $ans = Read-Host 'Do you want to set Ungoogled Chromium as your default browser? (y/n)'",
    "  if ($ans -match '^(y|Y)$') { $shouldRun = $true }",
    "}",
    "if ($shouldRun) {",
    "  Write-Host 'Setting Ungoogled Chromium as default browser...'",
    "  $chromePath = \"$dir\\chrome.exe\"",
    "  $chromiumUserDataDir = \"$dir\\User Data\"",
    "  $chromeArgs = ('--user-data-dir=\"{0}\" --disable-machine-id --disable-encryption --no-default-browser-check --profile-directory=\"Default\"' -f $chromiumUserDataDir)",
    "  $registryPaths = @('HKCU:\\Software\\Classes\\ChromiumHTML\\shell\\open\\command', 'HKCU:\\Software\\Classes\\http\\shell\\open\\command', 'HKCU:\\Software\\Classes\\https\\shell\\open\\command')",
    "  foreach ($path in $registryPaths) {",
    "    if (!(Test-Path $path)) { New-Item -Path $path -Force | Out-Null }",
    "    $commandValue = ('\"{0}\" {1} -- \"%1\"' -f $chromePath, $chromeArgs)",
    "    Set-ItemProperty -Path $path -Name '(Default)' -Value $commandValue -Type String -ErrorAction SilentlyContinue",
    "  }",
    "  $progId = 'ChromiumHTML'",
    "  if (!(Test-Path \"HKCU:\\Software\\Classes\\$progId\")) { New-Item -Path \"HKCU:\\Software\\Classes\\$progId\" -Force | Out-Null }",
    "  Set-ItemProperty -Path \"HKCU:\\Software\\Classes\\$progId\" -Name '(Default)' -Value 'Chromium HTML Document' -Type String -ErrorAction SilentlyContinue",
    "  $defaultIconPath = \"HKCU:\\Software\\Classes\\$progId\\DefaultIcon\"",
    "  if (!(Test-Path $defaultIconPath)) { New-Item -Path $defaultIconPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $defaultIconPath -Name '(Default)' -Value ('{0},0' -f $chromePath) -Type String -ErrorAction SilentlyContinue",
    "  $chromiumAppRoot = 'HKCU:\\Software\\Clients\\StartMenuInternet\\Chromium'",
    "  if (!(Test-Path $chromiumAppRoot)) { New-Item -Path $chromiumAppRoot -Force | Out-Null }",
    "  Set-ItemProperty -Path $chromiumAppRoot -Name '(Default)' -Value 'Ungoogled Chromium' -Type String -ErrorAction SilentlyContinue",
    "  $chromiumAppPath = Join-Path $chromiumAppRoot 'shell\\open\\command'",
    "  if (!(Test-Path $chromiumAppPath)) { New-Item -Path $chromiumAppPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $chromiumAppPath -Name '(Default)' -Value ('\"{0}\" {1}' -f $chromePath, $chromeArgs) -Type String -ErrorAction SilentlyContinue",
    "  $capabilitiesPath = Join-Path $chromiumAppRoot 'Capabilities'",
    "  if (!(Test-Path $capabilitiesPath)) { New-Item -Path $capabilitiesPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $capabilitiesPath -Name 'ApplicationName' -Value 'Ungoogled Chromium' -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $capabilitiesPath -Name 'ApplicationDescription' -Value 'Ungoogled Chromium Web Browser' -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $capabilitiesPath -Name 'ApplicationIcon' -Value ('{0},0' -f $chromePath) -Type String -ErrorAction SilentlyContinue",
    "  $urlAssocPath = Join-Path $capabilitiesPath 'URLAssociations'",
    "  if (!(Test-Path $urlAssocPath)) { New-Item -Path $urlAssocPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $urlAssocPath -Name 'http' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $urlAssocPath -Name 'https' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  $fileAssocPath = Join-Path $capabilitiesPath 'FileAssociations'",
    "  if (!(Test-Path $fileAssocPath)) { New-Item -Path $fileAssocPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.html' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.htm' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.shtml' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.xht' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.xhtml' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.svg' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.mht' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.mhtml' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.pdf' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.webp' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.xml' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.rss' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  Set-ItemProperty -Path $fileAssocPath -Name '.atom' -Value $progId -Type String -ErrorAction SilentlyContinue",
    "  $registeredAppsPath = 'HKCU:\\Software\\RegisteredApplications'",
    "  if (!(Test-Path $registeredAppsPath)) { New-Item -Path $registeredAppsPath -Force | Out-Null }",
    "  Set-ItemProperty -Path $registeredAppsPath -Name 'Chromium' -Value 'Software\\Clients\\StartMenuInternet\\Chromium\\Capabilities' -Type String -ErrorAction SilentlyContinue",
    "  $httpUserChoice = 'HKCU:\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice'",
    "  $httpsUserChoice = 'HKCU:\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice'",
    "  foreach ($uc in @($httpUserChoice, $httpsUserChoice)) {",
    "    if (Test-Path $uc) {",
    "      $currentProgId = (Get-ItemProperty -Path $uc -ErrorAction SilentlyContinue).ProgId",
    "      if ($currentProgId) {",
    "        $progIdPath = \"HKCU:\\Software\\Classes\\$currentProgId\\shell\\open\\command\"",
    "        if (!(Test-Path $progIdPath)) { New-Item -Path $progIdPath -Force | Out-Null }",
    "        Set-ItemProperty -Path $progIdPath -Name '(Default)' -Value ('\"{0}\" {1} -- \"%1\"' -f $chromePath, $chromeArgs) -Type String -ErrorAction SilentlyContinue",
    "      }",
    "    }",
    "  }",
    "  Write-Host 'Registry updated. Opening Default Apps settings for any remaining configuration...' -ForegroundColor Yellow",
    "  try { Start-Process 'ms-settings:defaultapps' } catch { Write-Host 'Could not open Default Apps settings automatically.' -ForegroundColor Yellow }",
    "} else {",
    "  Write-Host 'Skipping default browser setup. To run automatically, set env var SCOOP_SET_DEFAULT_BROWSER=1 before install.'",
    "}"
  ],
  "persist": "User Data",
  "checkver": {
    "url": "https://api.github.com/repos/ungoogled-software/ungoogled-chromium-windows/releases/latest",
    "regex": "\"tag_name\":\\s*\"([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+\\.[0-9]+)\""
  },
  "autoupdate": {
    "url": "https://github.com/ungoogled-software/ungoogled-chromium-windows/releases/download/$version/ungoogled-chromium_$version_windows_x64.zip",
    "extract_dir": "ungoogled-chromium_$version_windows_x64"
  }
}